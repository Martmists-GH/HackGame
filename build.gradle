import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.github.ben-manes.versions" version "0.39.0"
}

group = "com.martmists.hackgame"
version = game_version

configurations {
    runtime.extendsFrom commonRuntime
    runtime.extendsFrom clientRuntime
    runtime.extendsFrom serverRuntime
    implementation.extendsFrom common
    implementation.extendsFrom client
    implementation.extendsFrom server
}

dependencies {
    // === Common dependencies ===
    // Kotlin
    common "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Argument Parsing
    common "org.jetbrains.kotlinx:kotlinx-cli-jvm:0.3.2"

    // Packet Serialization
    common "org.jetbrains.kotlinx:kotlinx-serialization-core:1.2.1"
    common "org.jetbrains.kotlinx:kotlinx-serialization-protobuf:1.2.1"

    // Versioning (mostly unused)
    common "net.swiftzer.semver:semver:1.1.1"

    // Manifests
    common "com.jcabi:jcabi-manifests:1.1"

    // Logging
    common "org.slf4j:slf4j-simple:2.0.0-alpha1"
    // TODO: Use this in prod
    // common "org.slf4j:slf4j-nop:1.7.30"

    // === Client-only dependencies ===
    // TUI Library
    client "com.googlecode.lanterna:lanterna:3.2.0-alpha1"

    // === Server-only dependencies ===
    // Command parser
    server "com.mojang:brigadier:1.0.500"

    // Database
    server "org.jetbrains.exposed:exposed-core:0.31.1"
    server "com.ToxicBakery.library.bcrypt:bcrypt-jvm:1.0.9"
    serverRuntime "org.jetbrains.exposed:exposed-jdbc:0.31.1"
    serverRuntime "org.postgresql:postgresql:42.2.20"

    // === LOADER ===
    common "org.ow2.asm:asm:9.1"
    common "org.ow2.asm:asm-analysis:9.1"
    common "org.ow2.asm:asm-commons:9.1"
    common "org.ow2.asm:asm-tree:9.1"
    common "org.ow2.asm:asm-util:9.1"
    common "net.fabricmc:sponge-mixin:0.9.3+mixin.0.8.2"
    common "com.google.guava:guava:30.1.1-jre"
    common "com.google.jimfs:jimfs:1.2"
    common "net.fabricmc:fabric-loader-sat4j:2.3.5.4"
    common "net.fabricmc:tiny-mappings-parser:0.3.0+build.17"
    common "net.fabricmc:tiny-remapper:0.3.2"
    common 'net.fabricmc:access-widener:1.0.2'
    common ("net.minecraft:launchwrapper:1.12") {
        transitive = false
    }
    common "net.sf.jopt-simple:jopt-simple:6.0-alpha-3"
    common "org.apache.logging.log4j:log4j-api:2.14.1"
    commonRuntime "org.apache.logging.log4j:log4j-to-slf4j:2.14.1"
    common "com.google.code.gson:gson:2.8.7"
}

repositories {
    mavenCentral()
    maven {
        name = "Kotlinx"
        url = "https://kotlin.bintray.com/kotlinx"
    }
    maven {
        name = "Brigadier"
        url = "https://libraries.minecraft.net"
    }
    maven {
        name = "Fabric"
        url = "https://maven.modmuss50.me/"
    }
    maven {
        name = "SpongePowered"
        url = "https://repo.spongepowered.org/maven"
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "16"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "16"
    }
}

processResources {
    inputs.property "version", project.game_version
    filesMatching("fabric.mod.json") {
        expand version: project.game_version
    }
}


jar {
    enabled = false
}

def setManifest(Jar p, String type) {
    p.manifest {
        attributes(
                "Multi-Release": true,
                "Main-Class": "com/martmists/hackgame/loader/Main",
                "Game-Type": type,
                "Game-Version": project.game_version
        )
    }
}

shadowJar {
    classifier ""
    configurations = [project.configurations.common,
                      project.configurations.commonRuntime,
                      project.configurations.client,
                      project.configurations.clientRuntime,
                      project.configurations.server,
                      project.configurations.serverRuntime]
    exclude "META-INF/*.SF"
    exclude "META-INF/*.RSA"
    exclude "META-INF/*.DSA"
    setManifest(it, "*")
}

task serverJar(type: ShadowJar, dependsOn: classes) {
    from sourceSets.main.output
    exclude "com/martmists/hackgame/client/**"
    exclude "META-INF/*.SF"
    exclude "META-INF/*.RSA"
    exclude "META-INF/*.DSA"
    classifier "server"
    configurations = [project.configurations.common,
                      project.configurations.commonRuntime,
                      project.configurations.server,
                      project.configurations.serverRuntime]
    setManifest(it, "server")
}

task clientJar(type: ShadowJar, dependsOn: classes) {
    from sourceSets.main.output
    exclude "com/martmists/hackgame/server/**"
    exclude "META-INF/*.SF"
    exclude "META-INF/*.RSA"
    exclude "META-INF/*.DSA"
    classifier "client"
    configurations = [project.configurations.common,
                      project.configurations.commonRuntime,
                      project.configurations.client,
                      project.configurations.clientRuntime,]
    setManifest(it, "client")
}

build.dependsOn(shadowJar, serverJar, clientJar)